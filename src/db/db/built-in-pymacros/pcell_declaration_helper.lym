<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc>@class [db] PCellDeclarationHelper &lt; PCellDeclaration
@brief A helper class to simplify the declaration of a PCell (Python version)

This class provides adds some convenience to the PCell declaration based
on PCellDeclaration. PCellDeclaration is a C++ object which is less
convenient to use than a Ruby-based approach. In particular this class
simplifies the declaration and use of parameters through accessor methods
that are created automatically from the declaration of the parameters.

The basic usage of this class is the following:

@code

import pya 

# Derive your PCell from PCellDeclarationHelper
class MyPCell(pya.PCellDeclarationHelper):

  def __init__(self):

    # Important: initialize the super class
    super(MyPCell, self).__init__()

    # your initialization: add parameters with name, type, description and
    # optional other values
    self.param("p", self.TypeInt, "The parameter", default = 1)
    self.param("l", self.TypeLayer, "The layer", default = pya.LayerInfo(1, 0))
    # add other parameters ..

  # reimplement display_text_impl
  def display_text_impl(self):
    # implement the method here
    pass

  # reimplement produce_impl
  def produce_impl(self):
    # implement the method here
    pass

  # optionally reimplement coerce_parameters_impl
  def coerce_parameters_impl(self):
    # implement the method here
    pass

@/code

An implementation of \\display_text_impl could look like this:

@code
  def display_text_impl(self):
    return "We have p=" + str(self.p)
@/code

Because in the sample declaration above we have declared parameter "p" we can access the value of p inside
the implementation simply by using the "p" method.

Similarily the \\produce_impl implementation could use code like the following. Please note that
\\layout and \\cell are available to get the layout and cell. Also because we have declared a layer parameter "l", 
we can access the layer index with the "l_layer" method:

@code
  def produce_impl(self):
    cell.shapes(self.l_layer).insert(pya.Box(0, 0, self.p*100, self.p*200))
@/code

Again in this sample, we used "p" to access the parameter "p".

The implementation of \\coerce_parameter_impl can make use of the parameter setters. In the case of the "p"
parameter, the setter is "set_p":

@code
  def coerce_parameter_impl(self):
    if (p &gt;= 10):
      self.p = 10
@/code

@method initialize
@brief Initializes this instance

@method layout
@brief Gets the reference to the current layout within \\produce_impl, \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the \\Layout object of the shape which will be converted.

@method shape
@brief Gets the reference to the current shape within \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the \\Shape object of the shape which will be converted.

@method layer
@brief Gets the reference to the current layer index within \\can_create_from_shape_impl, \\parameters_from_shape_impl and \\transformation_from_shape_impl

The object returned is the layer index within the \\Layout object of the shape which will be converted.

@method cell
@brief Gets the reference to the current cell within \\produce_impl

@method param
@args name, type, description, ...

@brief Declares a parameter with the given name, type and description and optional attributes.

@param name The name of the parameter. Must be a simple word.
@param type The type. One of the Type... constants, that this class borrowed from \\PCellParameterDeclaration.
@param description The description text for this parameter

Optional, named parameters are

@ul
  @li 
    @bhidden@/b: (boolean) true, if the parameter is not shown in the dialog
  @/li
  @li 
    @breadonly@/b: (boolean) true, if the parameter cannot be edited
  @/li
  @li 
    @bunit@/b: the unit string
  @/li
  @li 
    @bdefault@/b: the default value
  @/li
  @li 
    @bchoices@/b: ([ [ d, v ], ... ]) choice descriptions/value for choice type
  @/li
@/ul

"choices" must be an array of two-element arrays (description text, value) which specify one
choice each for parameters with a choice of values. Such parameters are represented by a drop-down box.

This declaration will create an attribute "x" with getter and setter, where "x" is the name of the parameter.
If the type is TypeLayer, a getter "x_layer" delivering the layer index inside \\produce_impl is
created as well.

@method display_text_impl

@brief Delivers the display text

This method must be reimplemented in a PCell class to identify the PCell in human-readable form.
This text is shown in the cell tree for the PCell for example.

@method produce_impl

@brief Produces the layout

This method must be reimplemented in a PCell class.
Using the parameter values provided by the parameter getter and setters and the layout and cell through \\layout() and \\cell(),
this method is supposed to produce the final layout inside the given cell.

@method coerce_parameters_impl

@brief Coerces the parameters

This method can be reimplemented in a PCell class.
It is supposed to adjust parameters to render a consistent parameter set and to fix 
parameter range errors. This method is called for example inside the PCell user interface to 
compute the actual parameters when "Apply" is pressed.

@method can_create_from_shape_impl

@brief Returns true if the PCell can be created from the given shape

This method can be reimplemented in a PCell class.
If the PCell can be created from the shape avaible through the \\shape() method (a \\Shape object), this
method is supposed to return true. The layout the shape lives in can be accessed with \\layout() and the 
layer with \\layer().

The default implementation returns false.

@method parameters_from_shape_impl

@brief Sets the parameters from a shape

This method can be reimplemented in a PCell class.
If \\can_create_from_shape_impl returns true, this method is called to set the parameters from the 
given shape (see \\shape(), \\layout() and \\layer()). Note, that for setting a layer parameter you need
to create the \\LayerInfo object, i.e. like this:

@code
  self.l = self.layout().get_info(self.layer())
@/code

The default implementation does nothing. All parameters not set in this method will receive their default value.

@method transformation_from_shape_impl

@brief Gets the initial PCell instance transformation when creating from a shape

This method can be reimplemented in a PCell class.
If \\can_create_from_shape_impl returns true, this method is called to get the initial transformation from the 
given shape (see \\shape(), \\layout() and \\layer()). 

This method must return a \\Trans object. The default implementation returns a unit transformation (no displacement, no rotation).
 </doc>
 <autorun>false</autorun>
 <autorun-early>true</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
import pya

class _PCellDeclarationHelperLayerDescriptor(object):
  """
  A descriptor object which translates the PCell parameters into class attributes
  """
  
  def __init__(self, param_index):
    self.param_index = param_index
  
  def __get__(self, obj, type = None):
    return obj._layers[self.param_index]
    
  def __set__(self, obj, value):
    raise AttributeError("can't change layer attribute")

class _PCellDeclarationHelperParameterDescriptor(object):
  """
  A descriptor object which translates the PCell parameters into class attributes

  In some cases (i.e. can_convert_from_shape), these placeholders are not 
  connected to real parameters (obj._param_values is None). In this case,
  the descriptor acts as a value holder (self.value)
  """
  
  def __init__(self, param_index):
    self.param_index = param_index
    self.value = None
  
  def __get__(self, obj, type = None):
    if obj._param_values:
      return obj._param_values[self.param_index]
    else:
      return self.value
    
  def __set__(self, obj, value):
    if obj._param_values:
      obj._param_values[self.param_index] = value
    else:
      self.value = value

class _PCellDeclarationHelper(pya.PCellDeclaration):
  """  
  A helper class that somewhat simplifies the implementation
  of a PCell
  """

  def __init__(self):
    """
    initialize this instance
    """
    # "private" attributes
    self._param_decls = []
    self._param_values = None
    self._layer_param_index = []
    self._layers = []
    # public attributes
    self.layout = None
    self.shape = None
    self.layer = None
    self.cell = None

  def param(self, name, value_type, description, hidden = False, readonly = False, unit = None, default = None, choices = None):
    """
    Defines a parameter
      name         -&gt; the short name of the parameter
      type         -&gt; the type of the parameter
      description  -&gt; the description text
    named parameters
      hidden      -&gt; (boolean) true, if the parameter is not shown in the dialog
      readonly    -&gt; (boolean) true, if the parameter cannot be edited
      unit        -&gt; the unit string
      default     -&gt; the default value
      choices     -&gt; ([ [ d, v ], ...) choice descriptions/value for choice type
    this method defines accessor methods for the parameters
      {name}       -&gt; read accessor
      set_{name}   -&gt; write accessor ({name}= does not work because the
                      Ruby confuses that method with variables)
      {name}_layer -&gt; read accessor for the layer index for TypeLayer parameters
    """
  
    # create accessor methods for the parameters
    param_index = len(self._param_decls)
    setattr(type(self), name, _PCellDeclarationHelperParameterDescriptor(param_index))

    if value_type == type(self).TypeLayer:
      setattr(type(self), name + "_layer", _PCellDeclarationHelperLayerDescriptor(len(self._layer_param_index)))
      self._layer_param_index.append(param_index)
      
    # store the parameter declarations
    pdecl = pya.PCellParameterDeclaration(name, value_type, description)
    self._param_decls.append(pdecl)    
    
    # set additional attributes of the parameters
    pdecl.hidden = hidden
    pdecl.readonly = readonly
    if not (default is None):
      pdecl.default = default
    if not (unit is None):
      pdecl.unit = unit
    if not (choices is None):
      if not isinstance(choices, list) and not isinstance(choices, tuple):
        raise "choices value must be an list/tuple of two-element arrays (description, value)"
      for c in choices:
        if (not isinstance(choices, list) and not isinstance(choices, tuple)) or len(c) != 2:
          raise "choices value must be an list/tuple of two-element arrays (description, value)"
        pdecl.add_choice(c[0],c[1])
    
    # return the declaration object for further operations
    return pdecl
  
  def display_text(self, parameters):
    """
    implementation of display_text
    """
    self._param_values = parameters
    text = self.display_text_impl()
    self._param_values = None
    return text
  
  def get_parameters(self):
    """
    gets the parameters
    """
    return self._param_decls

  def get_values(self):
    """
    gets the temporary parameter values
    """
    v = self._param_values
    self._param_values = None
    return v
  
  def init_values(self, values = None, layers = None):
    """
    initializes the temporary parameter values
    "values" are the original values. If "None" is given, the
    default values will be used. 
    "layers" are the layer indexes corresponding to the layer
    parameters.
    """
    if not values:
      self._param_values = []
      for pd in self._param_decls:
        self._param_values.append(pd.default)
    else:
      self._param_values = values
    self._layers = layers

  def finish(self):
    """
    Needs to be called at the end of produce() after init_values was used
    """
    self._param_values = None
    self._layers = None
    
  def get_layers(self, parameters):
    """
    get the layer definitions
    """
    layers = []
    for i in self._layer_param_index:
      layers.append(parameters[i])
    return layers
    
  def coerce_parameters(self, layout, parameters):
    """
    coerce parameters (make consistent)
    """
    self.init_values(parameters)
    self.layout = layout
    self.coerce_parameters_impl()
    self.layout = None
    return self.get_values()

  def produce(self, layout, layers, parameters, cell):
    """
    coerce parameters (make consistent)
    """
    self.init_values(parameters, layers)
    self.cell = cell
    self.layout = layout
    self.produce_impl()
    self.cell = None
    self.layout = None
    self.finish()

  def can_create_from_shape(self, layout, shape, layer):
    """
    produce a helper for can_create_from_shape
    """
    self.layout = layout
    self.shape = shape
    self.layer = layer
    ret = self.can_create_from_shape_impl()
    self.layout = None
    self.shape = None
    self.layer = None
    return ret
  
  def transformation_from_shape(self, layout, shape, layer):
    """
    produce a helper for parameters_from_shape
    """
    self.layout = layout
    self.shape = shape
    self.layer = layer
    t = self.transformation_from_shape_impl()
    self.layout = None
    self.shape = None
    self.layer = None
    return t
  
  def parameters_from_shape(self, layout, shape, layer):
    """
    produce a helper for parameters_from_shape
    with this helper, the implementation can use the parameter setters
    """
    self.init_values()
    self.layout = layout
    self.shape = shape
    self.layer = layer
    self.parameters_from_shape_impl()
    param = self.get_values()
    self.layout = None
    self.shape = None
    self.layer = None
    return param
  
  def display_text_impl(self):
    """
    default implementation
    """
    return ""
 
  def coerce_parameters_impl(self):
    """
    default implementation 
    """
    pass
  
  def produce_impl(self):
    """
    default implementation
    """
    pass

  def can_create_from_shape_impl(self):
    """
    default implementation
    """
    return False
  
  def parameters_from_shape_impl(self):
    """
    default implementation
    """
    pass
  
  def transformation_from_shape_impl(self):
    """
    default implementation
    """
    return pya.Trans()
  
# import the Type... constants from PCellParameterDeclaration
for k in dir(pya.PCellParameterDeclaration):
  if k.startswith("Type"):
    setattr(_PCellDeclarationHelper, k, getattr(pya.PCellParameterDeclaration, k))

# Inject the PCellDeclarationHelper into pya module for consistency:
setattr(pya, "PCellDeclarationHelper", _PCellDeclarationHelper)

</text>
</klayout-macro>
